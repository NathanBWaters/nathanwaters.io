{"version":3,"sources":["../source/helpers.js"],"names":[],"mappings":"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","file":"helpers.js","sourcesContent":["// // if the variable is defined\r\nexport const exists = what => typeof what !== 'undefined'\r\n\r\n// used for JSON object type checking\r\nconst object_constructor = {}.constructor\r\n\r\n// detects a JSON object\r\nexport function is_object(object)\r\n{\r\n\treturn exists(object) && (object !== null) && object.constructor === object_constructor\r\n}\r\n\r\n// extends the first object with \r\n/* istanbul ignore next: some weird transpiled code, not testable */\r\nexport function extend(...objects)\r\n{\r\n\tobjects = objects.filter(x => exists(x))\r\n\r\n\tif (objects.length === 0)\r\n\t{\r\n\t\treturn\r\n\t}\r\n\t\r\n\tif (objects.length === 1)\r\n\t{\r\n\t\treturn objects[0]\r\n\t}\r\n\r\n\tconst to   = objects[0]\r\n\tconst from = objects[1]\r\n\r\n\tif (objects.length > 2)\r\n\t{\r\n\t\tconst last = objects.pop()\r\n\t\tconst intermediary_result = extend.apply(this, objects)\r\n\t\treturn extend(intermediary_result, last)\r\n\t}\r\n\r\n\tfor (let key of Object.keys(from))\r\n\t{\r\n\t\tif (is_object(from[key]))\r\n\t\t{\r\n\t\t\tif (!is_object(to[key]))\r\n\t\t\t{\r\n\t\t\t\tto[key] = {}\r\n\t\t\t}\r\n\r\n\t\t\textend(to[key], from[key])\r\n\t\t}\r\n\t\telse if (Array.isArray(from[key]))\r\n\t\t{\r\n\t\t\tif (!Array.isArray(to[key]))\r\n\t\t\t{\r\n\t\t\t\tto[key] = []\r\n\t\t\t}\r\n\r\n\t\t\tto[key] = to[key].concat(clone(from[key]))\r\n\t\t}\r\n\t\telse\r\n\t\t{\r\n\t\t\tto[key] = from[key]\r\n\t\t}\r\n\t}\r\n\r\n\treturn to\r\n}\r\n\r\nexport function merge()\r\n{\r\n\tconst parameters = Array.prototype.slice.call(arguments, 0)\r\n\tparameters.unshift({})\r\n\treturn extend.apply(this, parameters)\r\n}\r\n\r\nexport function clone(object)\r\n{\r\n\tif (is_object(object))\r\n\t{\r\n\t\treturn merge({}, object)\r\n\t}\r\n\telse if (Array.isArray(object))\r\n\t{\r\n\t\treturn object.map(x => clone(x))\r\n\t}\r\n\telse\r\n\t{\r\n\t\treturn object\r\n\t}\r\n}\r\n\r\n// converts all camelCased keys of an object to lodash style\r\nexport function convert_from_camel_case(object)\r\n{\r\n\tfor (let key of Object.keys(object))\r\n\t{\r\n\t\tif (/[A-Z]/.test(key))\r\n\t\t{\r\n\t\t\tconst lo_dashed_key = key.replace(/([A-Z])/g, function(match, group_1)\r\n\t\t\t{\r\n\t\t\t\treturn '_' + group_1.toLowerCase()\r\n\t\t\t})\r\n\r\n\t\t\tif (!exists(object[lo_dashed_key]))\r\n\t\t\t{\r\n\t\t\t\tobject[lo_dashed_key] = object[key]\r\n\t\t\t\tdelete object[key]\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\treturn object\r\n}\r\n\r\nfunction escape_regexp(string)\r\n{\r\n\tconst specials = new RegExp(\"[.*+?|()\\\\[\\\\]{}\\\\\\\\]\", 'g')\r\n\treturn string.replace(specials, \"\\\\$&\")\r\n}\r\n\r\nexport function replace_all(where, what, with_what)\r\n{\r\n\tconst regexp = new RegExp(escape_regexp(what), 'g')\r\n\treturn where.replace(regexp, with_what)\r\n}\r\n\r\nexport function starts_with(string, substring)\r\n{\r\n\tlet j = substring.length\r\n\r\n\tif (j > string.length)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\twhile (j > 0)\r\n\t{\r\n\t\tj--\r\n\r\n\t\tif (string[j] !== substring[j])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n}\r\n\r\nexport function ends_with(string, substring)\r\n{\r\n\tlet i = string.length\r\n\tlet j = substring.length\r\n\r\n\tif (j > i)\r\n\t{\r\n\t\treturn false\r\n\t}\r\n\r\n\twhile (j > 0)\r\n\t{\r\n\t\ti--\r\n\t\tj--\r\n\r\n\t\tif (string[i] !== substring[j])\r\n\t\t{\r\n\t\t\treturn false\r\n\t\t}\r\n\t}\r\n\r\n\treturn true\r\n\r\n\t// const index = string.lastIndexOf(substring)\r\n\t// return index >= 0 && index === string.length - substring.length\r\n}\r\n\r\nexport function is_empty(array)\r\n{\r\n\treturn array.length === 0\r\n}\r\n\r\nexport function not_empty(array)\r\n{\r\n\treturn array.length > 0\r\n}\r\n\r\n// repeat string N times\r\nexport function repeat(what, times)\r\n{\r\n\tlet result = ''\r\n\twhile (times > 0)\r\n\t{\r\n\t\tresult += what\r\n\t\ttimes--\r\n\t}\r\n\treturn result\r\n}\r\n\r\n// if the text is blank\r\nexport function is_blank(text)\r\n{\r\n\treturn !exists(text) || !text.replace(/\\s/g, '')\r\n}\r\n\r\n// zips two arrays\r\nexport function zip(a, b)\r\n{\r\n\treturn a.map(function(_, index) \r\n\t{\r\n\t\treturn [a[index], b[index]]\r\n\t})\r\n}\r\n\r\n// last element of an array\r\nexport function last(array)\r\n{\r\n\treturn array[array.length - 1]\r\n}\r\n\r\n/**\r\n * Returns a camel case variant of the string, unless it's in TitleCase.\r\n * @param {string} string\r\n */\r\nexport function camel_case(string)\r\n{\r\n\tconst nameParts = string.split('_')\r\n\treturn nameParts.slice(1).reduce((reduced, current) =>\r\n\t{\r\n\t\treturn reduced + current.charAt(0).toUpperCase() + current.slice(1)\r\n\t},\r\n\tnameParts[0])\r\n}\r\n\r\n// detects \"private\" object properties (just in case there are any)\r\nconst is_private_property = name => starts_with(name, '__')\r\n\r\n/**\r\n * Creates camel case variants of the attributes on the object\r\n * @param {object} object\r\n */\r\nexport function alias_properties_with_camel_case(object)\r\n{\r\n\tfor (let key of Object.keys(object).filter(key => !is_private_property(key)))\r\n\t{\r\n\t\tobject[camel_case(key)] = object[key]\r\n\t}\r\n}\r\n"]}